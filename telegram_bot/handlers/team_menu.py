from aiogram import types
from aiogram.dispatcher import FSMContext
from database import (Database,
                      PROMPT_VIEW_TEAMS,
                      PROMPT_VIEW_NICKNAMES,
                      get_prompt_create_team,
                      get_prompts_leave_team,
                      get_prompt_view_teammates,
                      get_prompt_view_chat_id_by_nick,
                      get_prompt_view_user_team,
                      get_prompts_add_teammate,
                      get_prompt_view_team_size,
                      get_prompts_delete_team,
                      get_prompt_view_captain,
                      get_prompt_view_nickname_by_id)
from ..assets import TEAM_PHOTO_PATH
from .config import _ProfileStatesGroup
from ..bot_config import dp, bot
from ..keyboards import (confirm_leave_ikb,
                         confirm_delete_team_ikb,
                         get_invitation_to_team_ikb,
                         get_teammate_ikb,
                         get_teammates_ikb)




@dp.callback_query_handler(lambda callback: callback.data == 'create_team')
async def create_team(callback: types.CallbackQuery) -> None:
    await callback.message.delete()
    with open(TEAM_PHOTO_PATH, 'rb') as file:
        await callback.message.answer_photo(
            photo=types.InputFile(file),
            caption='üìç–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–π –∫–æ–º–∞–Ω–¥—ã'
        )
    await _ProfileStatesGroup.get_team_name.set()


@dp.message_handler(state=_ProfileStatesGroup.get_team_name)
async def get_team_name(message: types.Message,
                        state: FSMContext) -> None:
    team_name = message.text
    user_chat_id = str(message.chat.id)

    db = Database()
    teams = [i['team_name'] for i in db.get_data_list(PROMPT_VIEW_TEAMS)]

    if team_name in teams:
        await message.answer('–≠—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–∂–µ –∑–∞–Ω—è—Ç–æ, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ')
        return
    
    db.action(
        *get_prompt_create_team(team_name, user_chat_id)
    )
    await state.finish()
    await message.answer(
        text='üü¢ –í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞\n\n' \
        'üì£ –û–°–ù–û–í–ù–´–ï –ü–û–õ–û–ñ–ï–ù–ò–Ø\n' \
        '‚ô¶Ô∏è –∫–æ–º–∞–Ω–¥–∞ –º–æ–∂–µ—Ç –≤–∫–ª—é—á–∞—Ç—å –≤ —Å–µ–±—è –¥–æ 10 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n' \
        '‚ô¶Ô∏è —É—á–∞—Å—Ç–Ω–∏–∫ –º–æ–∂–µ—Ç —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –≤ –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ\n' \
        '‚ô¶Ô∏è –∏—Ç–æ–≥–æ–≤—ã–π –≤—ã–±–æ—Ä –∫–æ–º–∞–Ω–¥—ã –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –ø–æ –±–æ–ª—å—à–µ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≥–æ–ª–æ—Å–æ–≤\n'
    )
    await message.answer(
        text='üë• –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã:',
        reply_markup=get_teammates_ikb(
            user_chat_id=user_chat_id, team_name=team_name
        )
    )




@dp.callback_query_handler(lambda callback: callback.data.startswith('view_teammate_'))
async def view_teammate(callback: types.CallbackQuery) -> None:
    teammate_chat_id = callback.data.replace('view_teammate_', '')

    await callback.message.edit_text(
        text=f'<a href="tg://user?id={teammate_chat_id}">–£—á–∞—Å—Ç–Ω–∏–∫</a>',
        parse_mode='HTML'
    )
    await callback.message.edit_reply_markup(
        get_teammate_ikb(teammate_chat_id)
    )




@dp.callback_query_handler(lambda callback: callback.data.startswith('delete_teammate_'))
async def delete_teammate(callback: types.CallbackQuery) -> None:
    user_chat_id = callback.data.replace('delete_teammate_', '')
    
    db = Database()
    team_name = db.get_data_list(
        get_prompt_view_user_team(user_chat_id)
    )[0]['team_name']

    db.action(
        *get_prompts_leave_team(user_chat_id, team_name)
    )
    
    await callback.message.delete()
    await callback.message.answer('–£—á–∞—Å—Ç–Ω–∏–∫ —É–¥–∞–ª–µ–Ω')
    await bot.send_message(
        chat_id=user_chat_id,
        text=f"–í—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –∫–æ–º–∞–Ω–¥—ã {team_name}"
    )



@dp.callback_query_handler(lambda callback: callback.data.startswith('back_to_teammates_'))
async def back_to_teammates(callback: types.CallbackQuery) -> None:
    team_name = callback.data.replace('back_to_teammates_', '')
    await callback.message.edit_text(f'{team_name}\n–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥—ã:')
    await callback.message.edit_reply_markup(
        get_teammates_ikb(
            user_chat_id=str(callback.message.chat.id), team_name=team_name
        )
    )




@dp.callback_query_handler(lambda callback: callback.data.startswith('add_teammate_'))
async def add_teammate(callback: types.CallbackQuery) -> None:
    team_name = callback.data.replace('add_teammate_', '')
    db = Database()
    team_size = db.get_data_list(
        get_prompt_view_team_size(team_name)
    )[0]['teammates']

    if team_size >= 10:
        await callback.message.answer(
            '–ò—Å—á–µ—Ä–ø–∞–Ω –ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\nMAX 10 —á–µ–ª–æ–≤–µ–∫'
        )
        return
    
    await callback.message.answer(
        '–í–≤–µ–¥–∏—Ç–µ nickname —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å\n' \
        '–î–∞–Ω–Ω—ã–π –Ω–∏–∫ –≤–≤–æ–¥–∏—Ç—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–æ–º–∞–Ω–¥—ã /start –≤ —ç—Ç–æ–º –±–æ—Ç–µ'
    )
    await _ProfileStatesGroup.get_nickname_for_team.set()


@dp.message_handler(state=_ProfileStatesGroup.get_nickname_for_team)
async def get_team_name(message: types.Message, state=FSMContext) -> None:
    input_nickname = message.text

    db = Database()
    nicknames = [i['nickname'] for i in db.get_data_list(PROMPT_VIEW_NICKNAMES)]

    if input_nickname not in nicknames:
        await message.answer('–ß–µ–ª–æ–≤–µ–∫ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω')
        await state.finish()
        return
    
    user_chat_id = db.get_data_list(
        get_prompt_view_chat_id_by_nick(input_nickname)
    )[0]['chat_id']

    is_user_in_team = db.get_data_list(
        get_prompt_view_user_team(user_chat_id)
    )[0]['team_name']

    if is_user_in_team:
        await message.answer(
            '–î–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å, –ø–æ—Å–∫–æ–ª—å–∫—É –æ–Ω —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –¥—Ä—É–≥–æ–π –∫–æ–º–∞–Ω–¥–µ'
        )
        await state.finish()
        return
    
    await state.finish()
    
    captain_chat_id = str(message.chat.id)
    team_name = db.get_data_list(
        get_prompt_view_user_team(captain_chat_id)
    )[0]['team_name']
    db.action(
        *get_prompts_add_teammate(user_chat_id, team_name)
    )

    await state.finish()
    await bot.send_message(
        chat_id=user_chat_id,
        text=f'–í–∞—Å —Ö–æ—Ç—è—Ç –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É {team_name}',
        reply_markup=get_invitation_to_team_ikb(team_name)
    )
    await message.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {input_nickname} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ')


@dp.callback_query_handler(lambda callback: callback.data.startswith('accept_invitation_'))
async def accept_invitation(callback: types.CallbackQuery) -> None:
    team_name = callback.data.replace('accept_invitation_', '')
    user_chat_id = str(callback.message.chat.id)

    db = Database()
    db.action(
        *get_prompts_add_teammate(user_chat_id, team_name)
    )
    nickname = db.get_data_list(
        get_prompt_view_nickname_by_id(user_chat_id)
    )[0]['nickname']
    captain_chat_id = db.get_data_list(
        get_prompt_view_captain(team_name)
    )[0]['captain_chat_id']

    await bot.send_message(
        captain_chat_id,
        f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {nickname} –ø—Ä–∏–Ω—è–ª –≤–∞—à–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∫–æ–º–∞–Ω–¥—É'
    )

    await callback.message.answer(
        text='üü¢ –í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã \n\n' \
        'üì£ –û–°–ù–û–í–ù–´–ï –ü–û–õ–û–ñ–ï–ù–ò–Ø\n' \
        '‚ô¶Ô∏è –∫–æ–º–∞–Ω–¥–∞ –º–æ–∂–µ—Ç –≤–∫–ª—é—á–∞—Ç—å –≤ —Å–µ–±—è –¥–æ 10 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n' \
        '‚ô¶Ô∏è —É—á–∞—Å—Ç–Ω–∏–∫ –º–æ–∂–µ—Ç —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –≤ –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ\n' \
        '‚ô¶Ô∏è –∏—Ç–æ–≥–æ–≤—ã–π –≤—ã–±–æ—Ä –∫–æ–º–∞–Ω–¥—ã –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –ø–æ –±–æ–ª—å—à–µ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≥–æ–ª–æ—Å–æ–≤\n'
    )
    await callback.message.answer(
        text='üë• –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã:',
        reply_markup=get_teammates_ikb(
            user_chat_id=user_chat_id, team_name=team_name
        )
    )


@dp.callback_query_handler(lambda callback: callback.data.startswith('decline_invitation_'))
async def decline_invitation(callback: types.CallbackQuery) -> None:
    team_name = callback.data.replace('decline_invitation_', '')
    user_chat_id = str(callback.message.chat.id)

    db = Database()
    nickname = db.get_data_list(
        get_prompt_view_nickname_by_id(user_chat_id)
    )[0]['nickname']
    captain_chat_id = db.get_data_list(
        get_prompt_view_captain(team_name)
    )[0]['captain_chat_id']

    await bot.send_message(
        captain_chat_id,
        f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {nickname} –æ—Ç–∫–ª–æ–Ω–∏–ª –≤–∞—à–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∫–æ–º–∞–Ω–¥—É'
    )




@dp.callback_query_handler(lambda callback: callback.data == 'leave_team')
async def leave_team(callback: types.CallbackQuery) -> None:
    await callback.message.edit_text(
        text='–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ –∫–æ–º–∞–Ω–¥—ã?\n–î–æ–±–∞–≤–∏—Ç—å –≤–∞—Å –æ–±—Ä–∞—Ç–Ω–æ –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'
    )
    await callback.message.edit_reply_markup(confirm_leave_ikb)


@dp.callback_query_handler(lambda callback: callback.data == 'confirm_leave')
async def confirm_leave(callback: types.CallbackQuery) -> None:
    user_chat_id = str(callback.message.chat.id)

    db = Database()
    team_name = db.get_data_list(
        get_prompt_view_user_team(user_chat_id)
    )[0]['team_name']

    captain_chat_id = db.get_data_list(
        get_prompt_view_captain(team_name)
    )[0]['captain_chat_id']

    nickname = db.get_data_list(
        get_prompt_view_nickname_by_id(user_chat_id)
    )[0]['nickname']

    db.action(
        *get_prompts_leave_team(user_chat_id, team_name)
    )

    await callback.message.delete()
    await callback.message.answer('–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –∫–æ–º–∞–Ω–¥—É')
    await bot.send_message(
        chat_id=captain_chat_id,
        text=f'{nickname} –ø–æ–∫–∏–Ω—É–ª –∫–æ–º–∞–Ω–¥—É'
    )




@dp.callback_query_handler(lambda callback: callback.data == 'delete_team')
async def delete_team(callback: types.CallbackQuery) -> None:
    await callback.message.edit_text('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É?')
    await callback.message.edit_reply_markup(confirm_delete_team_ikb)


@dp.callback_query_handler(lambda callback: callback.data == 'confirm_delete_team')
async def confirm_delete_team(callback: types.CallbackQuery) -> None:
    user_chat_id = str(callback.message.chat.id)

    db = Database()
    team_name = db.get_data_list(
        get_prompt_view_user_team(user_chat_id)
    )[0]['team_name']
    db.action(*get_prompts_delete_team(team_name))
    
    teammates_no_captain = db.get_data_list(
        get_prompt_view_teammates(team_name, user_chat_id)
    )

    for user in teammates_no_captain:
        await bot.send_message(
            chat_id=user['chat_id'],
            text='–í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞'
        )
    await callback.message.delete()
    await callback.message.answer(f'–ö–æ–º–∞–Ω–¥–∞ {team_name} —É–¥–∞–ª–µ–Ω–∞')




@dp.callback_query_handler(lambda callback: callback.data == 'not_confirm')
async def not_confirm(callback: types.CallbackQuery) -> None:
    await callback.message.delete()